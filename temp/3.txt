def foo(x : T&) forall T
  @assert(@typeof(x).real == Undef&)
  @assert(@typeof(x).imaginary == Undef&)
  Std::pp(@typeof(x)) # => (real: Undef&, imaginary: Undef&)

  Std::pp(\@typeof(x)) # => (real: SBin32&, imaginary: Undef&)

  if x :? SBin32&
    @typeof(x) # => (real: SBin32&, imaginary: SBin32&)

  if x ~? SBin&
    @typeof(x) # => (real: Undef&, imaginary: SBin&)
    \@typeof(x) # => (real: SBin32&, imaginary: SBin&)
end
foo(42) # Auto-cast to `SBin32`

# def bar(x : Undef~Int<Bitsize: 32>)
def bar(x ~ Int<Bitsize: 32>) # Sugar
  @typeof(x) # (real: Undef, imaginary: Int<Bitsize: 32>)

  if x ~? UBin
  if x :? ~UBin
